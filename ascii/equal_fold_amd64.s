// Code generated by command: go run equal_fold_asm.go -out equal_fold_amd64.s -stubs equal_fold_amd64.go. DO NOT EDIT.

#include "textflag.h"

// func equalFoldAVX2(a *byte, b *byte, n uintptr) int
// Requires: AVX, AVX2, SSE4.1
TEXT Â·equalFoldAVX2(SB), NOSPLIT, $0-32
	MOVQ         a+0(FP), AX
	MOVQ         b+8(FP), CX
	MOVQ         n+16(FP), DX
	SHRQ         $0x04, DX
	MOVQ         $0x0000000000000000, BX
	MOVQ         $0xdfdfdfdfdfdfdfdf, BP
	PINSRQ       $0x00, BP, X0
	PINSRQ       $0x01, BP, X0
	VPBROADCASTQ X0, Y1

loop64:
	CMPQ      DX, $0x04
	JL        loop32
	VPAND     (AX), Y1, Y2
	VPAND     (CX), Y1, Y3
	VPCMPEQB  Y3, Y2, Y2
	VPAND     32(AX), Y1, Y3
	VPAND     32(CX), Y1, Y4
	VPCMPEQB  Y4, Y3, Y3
	VPAND     Y3, Y2, Y2
	VPMOVMSKB Y2, BP
	CMPL      BP, $0xffffffff
	JNE       done
	ADDQ      $0x40, AX
	ADDQ      $0x40, CX
	SUBQ      $0x04, DX
	JMP       loop64

loop32:
	CMPQ      DX, $0x02
	JL        loop16
	VPAND     (AX), Y1, Y2
	VPAND     (CX), Y1, Y3
	VPCMPEQB  Y3, Y2, Y2
	VPMOVMSKB Y2, BP
	CMPL      BP, $0xffffffff
	JNE       done
	ADDQ      $0x20, AX
	ADDQ      $0x20, CX
	SUBQ      $0x02, DX

loop16:
	CMPQ      DX, $0x00
	JE        equal
	VPAND     (AX), X0, X1
	VPAND     (CX), X0, X0
	VPCMPEQB  X0, X1, X1
	VPMOVMSKB X1, BP
	CMPL      BP, $0x0000ffff
	JNE       done

equal:
	MOVQ $0x0000000000000001, BX

done:
	MOVQ BX, ret+24(FP)
	RET
