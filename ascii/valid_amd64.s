// Code generated by command: go run valid_asm.go -out valid_amd64.s -stubs valid_amd64.go. DO NOT EDIT.

#include "textflag.h"

// func validPrint16(p *byte, n uintptr) int
// Requires: SSE, SSE2, SSE4.1
TEXT Â·validPrint16(SB), NOSPLIT, $0-24
	MOVQ   n+8(FP), AX
	CMPQ   AX, $0x00
	JE     valid
	MOVQ   p+0(FP), CX
	MOVQ   $0x0000000000000000, DX
	MOVQ   $0xffffffffffffffff, BX
	PINSRQ $0x00, BX, X0
	PINSRQ $0x01, BX, X0
	MOVQ   $0x2020202020202020, BX
	MOVQ   $0x2020202020202020, BP
	PINSRQ $0x00, BX, X1
	PINSRQ $0x01, BP, X1
	MOVQ   $0x0101010101010101, BX
	MOVQ   $0x0101010101010101, BP
	PINSRQ $0x00, BX, X3
	PINSRQ $0x01, BP, X3
	MOVQ   $0x8080808080808080, BX
	MOVQ   $0x8080808080808080, BP
	PINSRQ $0x00, BX, X2
	PINSRQ $0x01, BP, X2
	PINSRQ $0x00, BX, X4
	PINSRQ $0x01, BP, X4

loop32:
	// Loop until less than 32 bytes remain.
	CMPQ   AX, $0x02
	JL     loop16
	MOVUPS (CX), X5
	MOVUPS X5, X6
	MOVUPS X5, X7
	SUBSS  X1, X7
	XORPS  X0, X6
	ANDPS  X6, X7
	ANDPS  X2, X7
	MOVQ   X7, BX
	CMPQ   BX, $0x00
	JNE    done
	MOVUPS X5, X7
	ADDSS  X3, X7
	ORPS   X5, X7
	ANDPS  X4, X7
	MOVQ   X7, BX
	CMPQ   BX, $0x00
	JNE    done
	MOVUPS 16(CX), X5
	MOVUPS X5, X6
	MOVUPS X5, X7
	SUBSS  X1, X7
	XORPS  X0, X6
	ANDPS  X6, X7
	ANDPS  X2, X7
	MOVQ   X7, BX
	CMPQ   BX, $0x00
	JNE    done
	MOVUPS X5, X7
	ADDSS  X3, X7
	ORPS   X5, X7
	ANDPS  X4, X7
	MOVQ   X7, BX
	CMPQ   BX, $0x00
	JNE    done
	SUBQ   $0x02, AX
	ADDQ   $0x20, CX
	JMP    loop32

loop16:
	// Consume the next 16 bytes of input.
	CMPQ   AX, $0x00
	JE     valid
	MOVUPS (CX), X5
	MOVUPS X5, X6
	MOVUPS X5, X7
	SUBSS  X1, X7
	XORPS  X0, X6
	ANDPS  X6, X7
	ANDPS  X2, X7
	MOVQ   X7, BX
	CMPQ   BX, $0x00
	JNE    done
	MOVUPS X5, X7
	ADDSS  X3, X7
	ORPS   X5, X7
	ANDPS  X4, X7
	MOVQ   X7, BX
	CMPQ   BX, $0x00
	JNE    done

valid:
	MOVQ $0x00000001, DX

done:
	MOVQ DX, ret+16(FP)
	RET
